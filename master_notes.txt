## Master Notes for EECS 3481
First created Sep 14th 2021

Lecture 2 Classical Crypto P1
    Modular Arithmetic

        12 == 3 mod 9
            * here the == represents to the three lined equivalnce
        
        this is read as 12 is congruent to 3 in respect to mod 9. basically what it says is that
            12 mod 9 = 3 mod 9
                In a corrupted sense, when writing 12 == 3 mod 9, it is meant
                    12 mod 9 = 3 and sometimes also
                    12 = 3 mod 9

        Definition of Modulus Operation
            Let a, r, m be integers and m > 0. We write 
                a == r mod m
            if (r - a) is divisable by m. 
            m called modulus
            r called remainder
            
                this definition means that the r is not unique. For a = 12, m = 9, you can have r = 3 (the obvious r). In which case you would have (r - a) = -9, and -9 is divisible by 9. You could also have had r = 12. In which case 12 - 12 = 0 is divisible by 0.

    
        Modular Division 0
            If ad = bd mod n
            then a = b mod (n / gcd(d, n))
                If gcd(d, n) = 1 -- they are co prime -- normal division applies a == b mod n

            Example 0
                20 == 2 mod 6
                10 * 2 == 1 * 2 mod (3 * 2)  --> gcd(d, n) = gcd(2, 6) = 2 
                so  
                    10 == 1 mod 3

            Example 1 
                3x == 12 mod 7
                3x == 4 * 3 mod 7 --> gcd(d, n) = gcd(3, 7) = 1 * co prime
                x == 4 mod 7
        
            Example 2
                3x == 4 mod 7 
                here we don't have a common d, so we can add by n until we get it
                3x == 4 + 7 + 7 mod 7
                3x == 18 mod 7
                x == 6 mod 7

        Modular Division 1
            Given three positive numbers a, d and m. Compute a / d under modulo m. 
                The task is basically to find a number c such that (d * c) % m = a % m.
                    This can only happen in d and m are co prime that is gcd(d, m) = 1 
                
                    a / d == c mod m iff gcd(d, m) = 1

                    Example 0
                        1 / 2 == c mod 9 exists because gcd(d, m) = gcd(2, 9) = 1
                        The explanation in the slides were not substantial, so I took a guess as to how to solve this euation. 
                        (2 * c) % mod 9 = 1 % mod 9
                        (2 * c) % mod 9 = 1
                        (2 * c) = 9k + 1, where k is a Natural number
                        c = (9k + 1) / 2 where c is an int
                        so c = 1, 5, 14, ... 
                    
                    Example 1
                        1 / 6 == c mod 9
                        no c exists because gcd(6, 9) = 3  

Lecture 3 Classical Crypto P2
 
    Vigenere Cipher - Polyalphabetic - the same letter gets mapped to different letters
        Watch this video it explains it well: https://www.youtube.com/watch?v=QgHnr8-h0xI
            It explains why the crypto analysis works. 

        Actual cipher is pretty simple
            Just like ceaser's cipher, but you do your shift based on the letter of your key. 

            c_i = (p_i + k_(i % len(key)) % 26

        To decipher just siimply do the reverse

            p_i = (c_i - k_(i % len(key)) % 26  

        Now the cryptoanalysis falls into these steps:

            1. Determine key length
                To determine the key length two methods can be used
                A. The method in the slide
                    i. Start with a test key length of 2
                    ii. break your cipher text into segments based on the test key length (as explained in 2.)
                    iii. Get frquency of letters for each segment
                        this is best represented in a vector where each index is the empirical probability that a letter of that index would appear
                            i.e. V = {p(A), p(B), ... }
                    iv. Determine the index of coincidence for each segment
                        index of coincidence is a measure of the probability that each letter would apprear twice
                            p(AA) = p(A) * p(A) = p(A)^2
                        so the 
                            IC = p(AA) + p(BB) + ... 
                               = p(A)^2 + p(B)^2 + ...
                               = V . V // dot product of the frequency vector with itself as explained in iii.
                    v. now the IC is significant because the IC of english is about 0.0667
                        so if the IC =. 0.0667 key_length = test_key_length
                            else test_key_length++ goto i

                B. The method in the video https://www.youtube.com/watch?v=QgHnr8-h0xI
                    i = 0
                    cipher_text_shifted_i = cipher_text
                    dot_product_array = []
                    
                    do for some time 
                        fvector_cipher_txt = determine frequency vector for cipher_text// explained in A. iii.
                        fvector_cipher_txt_shifted = determine frequency vector for cipher_text_shifted_i

                        dot_product_i = fvector_cipher_txt dot fvector_cipher_txt_shifted
                        dot_product_array[i] = dot_product_i

                        i++


                    the largest dot product in the array occurs at every interval -- that interval is your key_length
                        i.e. 
                        dot_product_array = [1, 2, 12, 3, 3, 12, 2, 4, 12, ... ]
                                                    ^         ^         ^
                        this is because the two vectors have the same magnitude as they are essentially the vector of the english language but somehow shifted. 
                            and dot product of A and B is 

                                = |A||B|cos(theta)
                                so this dot product for vectors of same magnitude would be highest when their theta is 0
                                    basically when the two vectors are equal. 
                                        we reach a vector that is ~equal on the interval of the length of the key

            2. Breaking cipher text into segments based on key length
                Group letters with the same mod of the key length into segments
                Step is easily explained with this example:
                    Key length = 3
                    G H W I O W R R R C O P
                    0 1 2 0 1 2 0 1 2 0 1 2 //i mod key length
                    
                    Now group based on the i mod key length

            3. Perform frequency analysis on the segments based on the key length
                
